from bisect import bisect

from base import Base
from util import check_if_key_exists


class Sortedset(Base):

    def __init__(self, server, key):
        super(Sortedset, self).__init__(self, server, key):
        self.dict = dict()

    @staticmethod
    def ZADD(server, key, dict):
        if key in server.dict:
            if server.dict[key].is_dead:
                server.dict[key] = Sortedset(server, key)
            else:
                if not isinstance(Sortedset, server.dict[key]):
                    return 'WRONG VALUE'
        else:
            server.dict[key] = Sortedset(server, key)
        value = server.dict[key]
        added = 0
        for key in dict:
            if not key in self.dict:
                added += 1
            self.dict[key] = dict[key]
        return added
    
    @check_if_key_exists
    def ZCARD(self):
        return len(self.dict)

    @check_if_key_exists
    def ZCOUNT(self, min, max):
        scores = self.dict.values()
        scores.sort()
        return bisect(scores, max) - bisect(scores, min) + 1

    def 